<?xml version="1.0" encoding="utf-8"?>
<android.support.constraint.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <LinearLayout
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toTopOf="parent">

        <!--第一种方式仅用来实现没有边界的效果，此方式下按钮的背景会失效-->
        <Button
            android:id="@+id/button_1"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textAllCaps="false"
            android:layout_marginTop="10dp"
            android:paddingBottom="20dp"
            android:paddingTop="20dp"
            android:paddingLeft="60dp"
            android:paddingRight="60dp"
            android:background="@drawable/ripple_no_border"
            android:text="Button1"/>
        <!--第二种方式目前只能使用系统的波纹效果，自定义style较复杂，未能实现-->
        <Button
            android:id="@+id/button_2"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textAllCaps="false"
            android:layout_marginTop="10dp"
            android:paddingBottom="20dp"
            android:paddingTop="20dp"
            android:paddingLeft="60dp"
            android:paddingRight="60dp"
            android:theme="@style/CustomButton"
            android:text="Button2"/>
        <!--就效果来看，第三种方式最好-->
        <Button
            android:id="@+id/button_3"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textAllCaps="false"
            android:layout_marginTop="10dp"
            android:paddingBottom="20dp"
            android:paddingTop="20dp"
            android:paddingLeft="60dp"
            android:paddingRight="60dp"
            android:background="@drawable/ripple_with_border"
            android:text="Button3"/>
        <!--第四种方式也可实现有边界的波纹效果，但是没有普通Button的阴影和z轴抬起效果-->
        <Button
            android:id="@+id/button_4"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textAllCaps="false"
            android:layout_marginTop="10dp"
            android:paddingBottom="20dp"
            android:paddingTop="20dp"
            android:paddingLeft="60dp"
            android:paddingRight="60dp"
            android:background="@drawable/ripple_with_border"
            android:foreground="@drawable/ripple_no_border"
            android:text="Button4"/>

    </LinearLayout>

</android.support.constraint.ConstraintLayout>